/*
Package matrix предоставляет набор инструментов для выполнения
математических и алгебраических операций над матрицами. Основные возможности
включают в себя выполнение стандартных операций
(сложение, вычитание, умножение и т.д), а также более специализированные операции
(транспонирование, адамарное произведение и т.д).
Пакет предназначен для реализации нейронной сети.
Структура Matrix скрывает внутренние вычисление.
*/
package matrix

import (
	"bufio"
	"io"
)

// Matrix является структурой оболочкой над собственной реализацией матриц.
// Это сделано для того чтобы без труда можно было подменить реализации методов из сторонних ресурсов,
// не меняя при этом код нейронной сети.
type Matrix struct {
	matrix *myMatrix // Указатель на собственную реализацию структуры матриц myMatrix
}

// convertToMatrixImpSlice преобразует слайс оболочек Matrix в слайс указателей на myMatrix (реализацию матриц).
// Это позволяет преобразовать высокоуровневую абстракцию матрицы в её внутреннее представление,
// используемое для непосредственной работы с данными.
// Одна из двух функций в которых фигурирует структура реализации матриц.
func convertToMatrixImpSlice(matrixesMatrix []Matrix) []*myMatrix {
	matrixesMyMatrix := make([]*myMatrix, len(matrixesMatrix))

	for i := 0; i < len(matrixesMatrix); i++ {
		matrixesMyMatrix[i] = matrixesMatrix[i].matrix
	}

	return matrixesMyMatrix
}

// convertToMatrixSlice преобразует слайс оболочек Matrix в слайс указателей на myMatrix (реализацию матриц).
// Это позволяет преобразовать высокоуровневую абстракцию матрицы в её внутреннее представление,
// используемое для непосредственной работы с данными.
// Одна из двух функций в которых фигурирует структура реализации матриц.
func convertToMatrixSlice(matrixesImp []*myMatrix) []Matrix {
	matrixes := make([]Matrix, len(matrixesImp))

	for i := 0; i < len(matrixesImp); i++ {
		matrixes[i] = Matrix{matrix: matrixesImp[i]}
	}

	return matrixes
}

// Zero создает и возвращает новый экземпляр Matrix с заданными размерами rows и columns.
// Все элементы матрицы инициализируются нулями.
// Функция вызывает панику, если указанные размеры матрицы не являются положительными числами.
func Zero(rows, columns int) Matrix {
	return Matrix{
		matrix: zero(rows, columns),
	}
}

// RandMatrix создает и возвращает новый экземпляр Matrix с заданными размерами rows и columns.
// Все элементы матрицы инициализируются случайными значениями из нормального распределения с математическим ожиданием 0
// и стандартным отклонением равным 0,01.
// Предупреждение: функция может вызвать панику, если rows или columns будут не положительными,
// поскольку внутренне вызывается функция zero, требующая положительных значений для этих параметров.
func RandMatrix(rows, columns int) Matrix {
	return Matrix{
		matrix: randMatrix(rows, columns),
	}
}

// GetColumns возвращает количество строк данной матрицы (структуры Matrix).
func (M Matrix) GetColumns() int {
	return M.matrix.getColumns()
}

// GetRows возвращает количество строк данной матрицы (структуры Matrix).
func (M Matrix) GetRows() int {
	return M.matrix.getRows()
}

// GetIJ возвращает элемент i строки, j столбца данной матрицы (структуры Matrix).
func (M Matrix) GetIJ(i, j int) float64 {
	return M.matrix.getIJ(i, j)
}

// SetIJ устанавливает элемент i строки, j столбца данной матрицы (структуры Matrix).
func (M Matrix) SetIJ(i, j int, x float64) {
	M.matrix.setIJ(i, j, x)
}

// Dot возвращает экземпляр Matrix.
// Возвращаемая матрица является результатом произведения матриц A и B.
// Метод вызывает панику, если исходные матрицы нельзя перемножить по определению.
// Предупреждение: функция может вызвать панику, если rows или columns будут не положительными,
// поскольку внутренне вызывается функция zero, требующая положительных значений для этих параметров.
func (A Matrix) Dot(B Matrix) Matrix {
	return Matrix{
		matrix: A.matrix.dot(B.matrix),
	}
}

// Add возвращает экземпляр Matrix.
// Возвращаемая матрица является результатом суммы матриц A и B.
// Метод вызывает панику, если размерности исходных матриц не равны.
// Предупреждение: функция может вызвать панику, если rows или columns будут не положительными,
// поскольку внутренне вызывается функция zero, требующая положительных значений для этих параметров.
func (A Matrix) Add(B Matrix) Matrix {
	return Matrix{
		matrix: A.matrix.add(B.matrix),
	}
}

// Sub возвращает экземпляр Matrix.
// Возвращаемая матрица является результатом разности матриц A и B.
// Метод вызывает панику, если размерности исходных матриц не равны.
// Предупреждение: функция может вызвать панику, если rows или columns будут не положительными,
// поскольку внутренне вызывается функция zero, требующая положительных значений для этих параметров.
func (A Matrix) Sub(B Matrix) Matrix {
	return Matrix{
		matrix: A.matrix.sub(B.matrix),
	}
}

// HadamardProduct возвращает экземпляр Matrix.
// Возвращаемая матрица является результатом адамарного произведения матриц A и B.
// Метод вызывает панику, если размерности исходных матриц не равны.
// Предупреждение: функция может вызвать панику, если rows или columns будут не положительными,
// поскольку внутренне вызывается функция zero, требующая положительных значений для этих параметров.
// Результатом адамарного произведение есть матрица такой же размерности что и перемножаемые матрицы,
// где i, j элемент результирующей матрицы равен произведению соответствующих элементов исходных матриц.
func (A Matrix) HadamardProduct(B Matrix) Matrix {
	return Matrix{
		matrix: A.matrix.hadamardProduct(B.matrix),
	}
}

// T возвращает экземпляр Matrix.
// Возвращаемая матрица является транспонированной копией матрицы M.
// Предупреждение: функция может вызвать панику, если rows или columns будут не положительными,
// поскольку внутренне вызывается функция zero, требующая положительных значений для этих параметров.
func (M Matrix) T() Matrix {
	return Matrix{
		matrix: M.matrix.t(),
	}
}

// ForEach возвращает экземпляр Matrix.
// Возвращаемая матрица является результатом применения к каждому элементу исходной матрицы M функцию f func(float64) float64.
// Предупреждение: функция может вызвать панику, если rows или columns будут не положительными,
// поскольку внутренне вызывается функция zero, требующая положительных значений для этих параметров.
func (M Matrix) ForEach(f func(float64) float64) Matrix {
	return Matrix{
		matrix: M.matrix.forEach(f),
	}
}

// AddInPlace реализует сложение матриц A и B (структур Matrix).
// Результат сохраняется в A, изменяя ее.
// Метод вызывает панику если матрицы по определению нельзя умножить.
func (A Matrix) AddInPlace(B Matrix) {
	A.matrix.addInPlace(B.matrix)
}

// SubInPlace реализует разность матриц A и B (структур Matrix).
// Результат сохраняется в A, изменяя ее.
// Метод вызывает панику ,если размерность исходных матриц не равны.
func (A Matrix) SubInPlace(B Matrix) {
	A.matrix.subInPlace(B.matrix)
}

// HadamardProductInPlace реализует адамарное произведение матриц A и B (структур Matrix).
// Результат сохраняется в A, изменяя ее.
// Метод вызывает панику ,если размерность исходных матриц не равны.
// Результатом адамарного произведение есть матрица такой же размерности что и перемножаемые матрицы,
// где i, j элемент результирующей матрицы равен произведению соответствующих элементов исходных матриц.
func (A Matrix) HadamardProductInPlace(B Matrix) {
	A.matrix.hadamardProductInPlace(B.matrix)
}

// ForEachInPlace применяет к каждому элементу исходной матрицы M функцию f func(float64) float64.
// Результат сохраняется в M, изменяя ее.
func (M Matrix) ForEachInPlace(f func(float64) float64) {
	M.matrix.forEachInPlace(f)
}

// Slice2Matrix преобразует слайс []float64 в матрицу (структуру Matrix).
// Результат сохраняется в M, изменяя ее.
// Метод вызывает панику, если количество элементов матрицы не равно количеству элементов слайса.
func (M Matrix) Slice2Matrix(slc []float64) {
	M.matrix.slice2Matrix(slc)

}

// Matrix2Vector возвращает экземпляр Matrix и ошибку.
// Возвращаемая матрица является вектором, то есть матрицей размерности n на 1.
// Возвращающая матрица является нулевой, но 1 элемент этого вектора равен 1,
// индекс этого элемента есть единственный элемент матрицы M.
// Функция возвращает ошибку, если невозможно преобразовать вещественное число x в целочисленное.
// Так же функция возвращает ошибку если данная размерность n слишком мала.
// Предупреждение: функция может вызвать панику, если матрица M не имеет размерность 1 на 1,
// поскольку внутренне вызывается метод num, требующий матрицу размерности 1 на 1.
func Matrix2Vector(M Matrix, n int) (Matrix, error) {
	myMatr, err := matrix2Vector(M.matrix, n)
	if err != nil {
		return Matrix{}, err
	}

	return Matrix{
		matrix: myMatr,
	}, nil
}

// Vec2Dig возвращает целое число - индекс наибольшего элемента вектора (матрицы M размерности n на 1).
// функция работает обратно функции num2Vec.
// Функция вызывает панику, если матрица не является вектором и если матрица имеет размерность 1 на 1.
func Vec2Num(M Matrix) int {
	return vec2Num(M.matrix)
}

// Num возвращает единственный элемент матрицы (структуры myMatrix) размерности 1 на 1
// Функция вызывает панику, если размерность исходной матрицы не 1 на 1.
func Num(M Matrix) float64 {
	return M.matrix.num()
}

// Zeros возвращает указатель на массив из матриц (структур Matrix).
// Функция возвращает массив нулевых матриц той же размерности что и исходный массив матриц.
// Предупреждение: функция может вызвать панику, если rows или columns будут не положительными,
// поскольку внутренне вызывается функция Zero, требующая положительных значений для этих параметров.
func Zeros(slc *[]Matrix) *[]Matrix {
	res := make([]Matrix, len(*slc))

	for i := 0; i < len(*slc); i++ {
		res[i] = Zero((*slc)[i].GetRows(), (*slc)[i].GetColumns())
	}
	return &res
}

/*
Функции предназначены для работы тестов
*/

// DataToMatrix предназначена для тестов.
// Создает и возвращает матрицу (структуру Matrix).
// Структура Matrix получена из слайса [][]float64.
// Функция вызывает панику если слайс состоит из неравных по количеству элементов строк.
func DataToMatrix(arr [][]float64) Matrix {
	return Matrix{
		matrix: dataToMatrix(arr),
	}
}

// IsMatrixesEqual предназначена для тестов.
// Функция возвращает true, если структуры Matrix равны, иначе false.
func IsMatrixesEqual(A, B Matrix) bool {
	return isMatrixesEqual(A.matrix, B.matrix)
}

// countUniqueElements предназначена для тестов.
// Функция возвращает количество уникальных элементов матрицы (структуры Matrix).
// Функция предназначена для проверки функции RandMatrix.
func countUniqueElements(M Matrix) int {
	return _countUniqueElements(M.matrix)
}

// Show выводит матрицу (структуру Matrix) в консоль.
func (M Matrix) Show() {
	M.matrix.show()
}

// writeMatrix записывает данные нескольких матриц (структур Matrix) в поток вывода, реализующий интерфейс io.Writer,
// если запись не удалась функция возвращает ошибку.
// Функция форматирует данные каждой матрицы следующим образом:
// сначала записывается общее количество матриц в переданном слайсе,
// с новой строки для каждой матрицы записывается ее размерность (количество строк и столбцов),
// с новой строки данные самой матрицы.
// Элементы каждой строки матрицы разделяются пробелом, а строки матрицы - переводами строк.
// Функция не открывает и не закрывает поток вывода, управление потоком
// должно осуществляться вне этой функции.
func WriteMatrixes(writer io.Writer, matrixes []Matrix) error {
	matrixesImp := convertToMatrixImpSlice(matrixes)
	return writeMatrixes(writer, matrixesImp)
}

// ReadMatrix возвращает слайс из указателей на матрицы (структуры Matrix),
// прочитанные из файла, и ошибку, если она возникла.
// Функция читает данные, начиная с текущей позиции в потоке сканера.
// Каждый блок матрицы в файле должен быть отформатирован следующим образом:
// сначала идет число - общее количество матриц,
// затем с новой строки для каждой матрицы должна быть ее размерность (количество строк и столбцов),
// с новой строки данные самой матрицы.
// Элементы каждой строки матрицы разделяются пробелом, а строки матрицы - переводами строк.
// Функция принимает уже инициализированный сканер структуры *bufio.Scanner.
// Функция не открывает и не закрывает поток вывода, управление потоком
// должно осуществляться вне этой функции.
func ReadMatrixes(scanner *bufio.Scanner) ([]Matrix, error) {
	matrixesImp, err := readMatrixes(scanner)
	if err != nil {
		return nil, err
	}

	matrixes := convertToMatrixSlice(matrixesImp)

	return matrixes, nil
}
